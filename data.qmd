---
title: Data
description: We describe the sources of our data and the cleaning process.
toc: true
draft: false
---

## The Data

This data comes from a partnership between the Census Bureau, the NCHS (National Center for Health Statistics) and other federal agencies. It is a 20 minute online survey and is published every 2 weeks beginning on April 23, 2020. The specific data we are looking at from the August 20 - September 16, 2024 survey period and can be found on the Census Bureau website at: https://www.census.gov/programs-surveys/household-pulse-survey/data/datasets.html 


The survey was designed to complement the ability of the federal statistical system to rapidly respond and provide relevant information about the impact of COVID-19 in the United States. While the data was collected with a variety of federal agencies, collection was lead by the Census Bureau. 

## Variables

The data included a wide variety of variables from veteran status to the impacts of natural disasters. However, we decided to make the data more managable and focused by only examining the following variables:



#Cleaning the Data

First, we load the data.
```{r}
library(readr)
library(ggplot2)
library(dplyr)
# install.packages("patchwork")
library(patchwork)
data_unclean <- read_csv("dataset/data_unclean.csv")
```

Out of 220 variables (columns), we will keep 43 that we find may be useful.
Furthermore, many variables contain the values "-88" and "-99".
"-88" indicates "Missing / Did not report", which we interpret as NA.
"-99" indicates "Question seen but category not selected", which we convert to 0. This makes histograms concise (and makes regression easier, although that is not our focus).
```{r}
data_unclean <- read_csv("dataset/data_unclean.csv", na = c("-88"))
columns = c(
  "TBIRTH_YEAR",
  "RHISPANIC",
  "RRACE",
  "EEDUC",
  "MS",
  "EGENID_BIRTH",
  "RGENID_DESCRIBE",
  "SEXUAL_ORIENTATION_RV",
  "ENRPUBCHK",
  "ENRPRVCHK",
  "ENRHMSCHK",
  "ACTVDUTY1",
  "ACTVDUTY2",
  "ACTVDUTY3",
  "ACTVDUTY4",
  "ACTVDUTY5",
  "VETERAN1",
  "VETERAN2",
  "VETERAN3",
  "VETERAN4",
  "VETERAN5",
  "WRKLOSSRV",
  "ANYWORK",
  "KINDWORK",
  "RSNNOWRKRV",
  "ANXIOUS",
  "WORRY",
  "INTEREST",
  "DOWN",
  "MHLTH_NEED",
  "MHLTH_GET",
  "MHLTH_SATISFD",
  "MHLTH_DIFFCLT",
  "SOCIAL1",
  "SOCIAL2",
  "PRIVHLTH",
  "PUBHLTH",
  "EST_ST",
  "INCOME",
  "SUPPORT1",
  "SUPPORT2",
  "SUPPORT3",
  "SUPPORT4_RV"
)

data_unclean = data_unclean[columns]
data_unclean[data_unclean == -99] = 0

```

Next, we see how many values are NA in each variable.
```{r}
colSums(is.na(data_unclean[columns]))
```
The output indicates many NA (including "-88") values.

However, we believe the data is already quite clean, as many questions are only given to some survey participants.
For example, MHLTH_DIFFCLT represents a question asking whether the survey participant has difficulty finding mental health treatment for their child(ren). Evidently, only a small fraction of the 51280 participants have answered this question.
```{r}
sum(!is.na(data_unclean$MHLTH_DIFFCLT))
```

The histogram below plots the responses to MHLTH_DIFFCLT against the birth year of participants.
```{r}
# https://www.statology.org/r-convert-numeric-to-factor/
plot = ggplot(
  data = data_unclean[!is.na(data_unclean$MHLTH_DIFFCLT),],
  mapping = aes(x = TBIRTH_YEAR, fill = as.factor(MHLTH_DIFFCLT))
) + geom_histogram() + ggtitle("MHLTH_DIFFCLT vs birth year",
                               subtitle="MHLTH_DIFFCLT: A participant's difficulty finding mental health treatment for their child(ren)")

plot

```
Here,
0: Question seen but category not selected
1: Not difficult
2: Somewhat difficult
3: Very difficult
4: Unable to get treatment due to difficulty
5: Did not try to get treatment


## Page Info 

![](images/data-import-cheatsheet-thumbs.png)


This comes from the file `data.qmd`.

Your first steps in this project will be to find data to work on.

I recommend trying to find data that interests you and that you are knowledgeable about. A bad example would be if you have no interest in video games but your data set is about video games. I also recommend finding data that is related to current events, social justice, and other areas that have an impact.


Initially, you will study _one dataset_ but later you will need to combine that data with another dataset. For this reason, I recommend finding data that has some date and/or location components. These types of data are conducive to interesting visualizations and analysis and you can also combine this data with other data that also has a date or location variable.
Data from the census, weather data, economic data, are all relatively easy to combine with other data with time/location components.


## What makes a good data set?

* Data you are interested in and care about.
* Data where there are a lot of potential questions that you can explore.
* A data set that isn't completely cleaned already.
* Multiple sources for data that you can combine.
* Some type of time and/or location component.


## Where to keep data?


Below 50mb: In `dataset` folder

Above 50mb: In `dataset_ignore` folder. This folder will be ignored by `git` so you'll have to manually sync these files across your team.

### Sharing your data


For small datasets (<50mb), you can use the `dataset` folder that is tracked by github. Add the files just like you would any other file.

If you create a folder named `data` this will cause problems.

For larger datasets, you'll need to create a new folder in the project root directory named `dataset-ignore`. This will be ignored by git (based off the `.gitignore` file in the project root directory) which will help you avoid issues with Github's size limits. Your team will have to manually make sure the data files in `dataset-ignore` are synced across team members.

Your [load_and_clean_data.R](/scripts/load_and_clean_data.R) file is how you will load and clean your data. Here is a an example of a very simple one.

```{r}
source(
  "scripts/load_and_clean_data.R",
  echo = TRUE # Use echo=FALSE or omit it to avoid code output  
)
```
You should never use absolute paths (eg. `/Users/danielsussman/path/to/project/` or `C:\MA415\\Final_Project\`).

You might consider using the `here` function from the [`here` package](https://here.r-lib.org/articles/here.html) to avoid path problems.

### Load and clean data script

The idea behind this file is that someone coming to your website could largely replicate your analyses after running this script on the original data sets to clean them.
This file might create a derivative data set that you then use for your subsequent analysis.
Note that you don't need to run this script from every post/page.
Instead, you can load in the results of this script, which could be plain text files or `.RData` files. In your data page you'll describe how these results were created. If you have a very large data set, you might save smaller data sets that you can use for exploration purposes.
To link to this file, you can use `[cleaning script](/scripts/load_and_clean_data.R)` wich appears as [cleaning script](/scripts/load_and_clean_data.R). 

----

## Rubric: On this page

You will

* Describe where/how to find data.
  * You must include a link to the original data source(s). Make sure to provide attribution to those who collected the data.
  * Why was the data collected/curated? Who put it together? (This is important, if you don't know why it was collected then that might not be a good dataset to look at.
* Describe the different data files used and what each variable means. 
  * If you have many variables then only describe the most relevant ones and summarize the rest.
* Describe any cleaning you had to do for your data.
  * You *must* include a link to your `load_and_clean_data.R` file.
  * Rrename variables and recode factors to make data more clear.
  * Also, describe any additional R packages you used outside of those covered in class.
  * Describe and show code for how you combined multiple data files and any cleaning that was necessary for that.
  * Some repetition of what you do in your `load_and_clean_data.R` file is fine and encouraged if it helps explain what you did.
* Organization, clarity, cleanliness of the page
  * Make sure to remove excessive warnings, use clean easy-to-read code (without side scrolling), organize with sections, use bullets and other organization tools, etc.
  * This page should be self-contained.